"use strict";(self["webpackChunkvue_manage"]=self["webpackChunkvue_manage"]||[]).push([[596],{6596:function(e,t,s){s.r(t),s.d(t,{default:function(){return m}});var r=function(){var e=this,t=e._self._c;return t("el-form",{ref:"form",staticClass:"login-container",attrs:{model:e.form,"status-icon":"",rules:e.rules,"label-width":"100px"}},[t("h3",{staticClass:"login-title"},[e._v("系统登录")]),t("el-form-item",{staticClass:"userName",attrs:{label:"用户名","label-width":"80px",prop:"userName"}},[t("el-input",{attrs:{type:"input",autocomplete:"off",placeholder:"请输入账号"},model:{value:e.form.userName,callback:function(t){e.$set(e.form,"userName",t)},expression:"form.userName"}})],1),t("el-form-item",{attrs:{label:"密码","label-width":"80px",prop:"password"}},[t("el-input",{attrs:{type:"password",autocomplete:"off",placeholder:"请输入密码"},model:{value:e.form.password,callback:function(t){e.$set(e.form,"password",t)},expression:"form.password"}})],1),t("el-form-item",{staticClass:"login-submit-father"},[t("el-button",{staticClass:"login-submit-son",attrs:{type:"primary"},on:{click:e.login}},[e._v("登录")])],1)],1)},o=[],a=s(8560),n={name:"Login",data(){return{form:{},rules:{userName:[{required:!0,message:"请输入用户名",trigger:"blur"},{min:3,max:16,message:"用户名长度不能小于3位且不能大于16位"}],password:[{required:!0,message:"请输入密码",trigger:"blur"}]}}},methods:{login(){(0,a.r7)(this.form).then((({data:e})=>{2e4===e.code?(this.$store.commit("clearMenu"),this.$store.commit("setMenu",e.data.menu),this.$store.commit("setToken",e.data.token),this.$store.commit("addMenu",this.$router),this.$router.push({name:"home"})):this.$message.warning(e.data.message)}))}}},i=n,l=s(1001),u=(0,l.Z)(i,r,o,!1,null,"a851e56e",null),m=u.exports},8560:function(e,t,s){s.d(t,{Yu:function(){return m},r7:function(){return u},PR:function(){return c}});var r=s(6265),o=s.n(r),a={baseUrl:{dev:"/api/",pro:""}};const n=a.baseUrl.pro;class i{constructor(e){this.baseUrl=e}getInsideConfig(){const e={baseUrl:this.baseUrl,header:{}};return e}interceptors(e){e.interceptors.request.use((e=>(console.log("请求拦截器",e),e)),(e=>(console.log("请求拦截器失败",e.message),Promise.reject(e)))),e.interceptors.response.use((e=>(console.log("响应拦截器",e),e)),(e=>(console.log("响应拦截器失败",e.message),Promise.reject(e))))}request(e){const t=o().create();return e={...this.getInsideConfig(),...e},this.interceptors(t),t(e)}}var l=new i(n);const u=e=>l.request({url:"/promission/getMenu",method:"post",data:e}),m=()=>l.request({url:"/home/getData"}),c=e=>l.request({url:"/user/getUser",method:"get",params:e})}}]);
//# sourceMappingURL=596.b7a7b89a.js.map